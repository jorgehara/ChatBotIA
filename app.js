require("dotenv").config();
const {
  createBot,
  createProvider,
  createFlow,
  addKeyword,
  EVENTS,
} = require("@bot-whatsapp/bot");

const QRPortalWeb = require("@bot-whatsapp/portal");
const BaileysProvider = require("@bot-whatsapp/provider/baileys");
const MongoAdapter = require("@bot-whatsapp/database/mongo");
const path = require("path");
const fs = require("fs");
const chat = require("./chatGPT");
const { handlerAI } = require("./whisper");
const { delay } = require("@whiskeysockets/baileys");

const srcPath = path.join(__dirname, "src", "Horarios habituales.png");
const menuPath = path.join(__dirname, "mensajes", "menu.txt");
const menu = fs.readFileSync(menuPath, "utf8");

const promptConsultasPath = path.join(
  __dirname,
  "mensajes",
  "promptConsultas.txt"
);
const promptConsultas = fs.readFileSync(promptConsultasPath, "utf8");

const flowVoice = addKeyword(EVENTS.VOICE_NOTE).addAnswer(
  "Estoy escuchando tu audio, dame un momento por favor...",
  null,
  async (ctx, ctxFn) => {
    const text = await handlerAI(ctx);
    const prompt = promptConsultas;
    const consulta = text;
    const answer = await chat(prompt, consulta);
    await ctxFn.flowDynamic(answer.content);
  }
);

const flowMenu = addKeyword(EVENTS.ACTION)
  .addAnswer("ðŸ˜ŠðŸ‘‰ Conoce nuestras actividades diarias", {
    delay: 1000,
    media: srcPath,
  })
  .addAnswer("Â¿En quÃ© mÃ¡s puedo ayudarte?", {
    delay: 1000,
  })
  .addAnswer("Escribe *Menu* para volver al menÃº principal", { delay: 1000 });

const flowTurnos = addKeyword(EVENTS.ACTION)
  .addAnswer(
    "Si necesitas solicitar un turno de Anses o Viajar por un estudio mÃ©dico con anticipaciÃ³n comunicate a este nÃºmero: https://wa.me/5493794051686?text=Hola%20quisiera%20solicitar%20un%20turno%20para%20Anses/Viajar%20por%20un%20estudio%20mÃ©dico"
  )
  .addAnswer("Â¿En quÃ© mÃ¡s puedo ayudarte?", {
    delay: 1000,
  })
  .addAnswer("Escribe *Menu* para volver al menÃº principal", { delay: 1000 });

const flowConsultas = addKeyword(EVENTS.ACTION)
  .addAnswer("Intentemos resolver tu consulta ðŸ˜Š...", { delay: 100 })
  .addAnswer(
    "Escribe tu consulta *aqui* ðŸ‘‡",
    { delay: 100, capture: true },
    async (ctx, ctxFn) => {
      let prompt = promptConsultas;
      let consulta = ctx.body;
      let answer = await chat(prompt, consulta);
      await ctxFn.flowDynamic(answer.content);
    }
  )
  .addAnswer(
    "Â¿Necesitas mÃ¡s informaciÃ³n?, sÃ³lo cuentame e intentarÃ© resolver tus consultas",
    {
      // delay: 5000,
      capture: true,
    },
    async (ctx, ctxFn) => {
      let prompt = promptConsultas;
      let consulta = ctx.body;
      let answer = await chat(prompt, consulta);
      await ctxFn.flowDynamic(answer.content);
    }
  )
  .addAnswer("Escribe *Menu* para volver al menÃº principal", { delay: 1000 });

// const flowConsultas = addKeyword(EVENTS.ACTION)
//   .addAnswer("Intentemos resolver tu consulta ðŸ˜Š...", { delay: 1000 })
//   .addAnswer("Escribe tu consulta *aqui* ðŸ‘‡", { capture: true }, async (ctx, ctxFn) => {
//     const prompt = promptConsultas;
//     const consulta = ctx.body;
//     const answer = await chat(prompt, consulta);
//     await ctxFn.flowDynamic(answer.content);

//   })
//   .addAnswer("Â¿En quÃ© mÃ¡s puedo ayudarte?", {
//     delay: 1000,
//   })
//   .addAnswer("Escribe *Menu* para volver al menÃº principal", { delay: 1000 });

//----regions Eventos posibles
// EVENTS.WELCOME
// const flowWelcome = addKeyword(EVENTS.WELCOME)
// .addAnswer('Bienvenido a Bot Whatsapp')
//comienza cuando no coincide con ninguna palabra clave
// EVENTS.MEDIA
// const flowMedia = addKeyword(EVENTS.MEDIA)
// .addAnswer('ðŸ“„ AquÃ­ encontras las documentaciÃ³n recuerda que puedes mejorarla')
//comienza cuando se recibe una imagen o video
// EVENTS.LOCATION
// const flowLocation = addKeyword(EVENTS.LOCATION)
// .addAnswer('este es el flujo de location')
//comienza cuando se recibe una ubicaciÃ³n
// EVENTS.DOCUMENT
// const flowDocument = addKeyword(EVENTS.DOCUMENT)
// .addAnswer('este es el flujo de documentos')
//comienza cuando se recibe un documento PDF, WORD
// EVENTS.VOICE_NOTE
// const flowVoiceNote = addKeyword(EVENTS.VOICE_NOTE)
// .addAnswer('este es el flujo de notas de voz')
//comienza cuando se recibe una nota de voz

// EVENTS.ACTION ESPECIAL
// const flowAction = addKeyword(EVENTS.ACTION)
// .addAnswer('este es el flujo de acciones')
//comienza cuando se recibe un evento especial porque no se activa por una acciÃ³n directa del usuario,
//sino que debe ser llamado explÃ­citamente desde otra funciÃ³n dentro del cÃ³digo del bot

//---endregions Eventos posibles

const arrayWordActiveWelcome = [
  "hola",
  "Hola",
  "Hola Nico",
  "Hola Nico!",
  "Hola!",
  "Necesito",
  "Quiero",
];
const flowWelcome = addKeyword(arrayWordActiveWelcome, { sensitive: true })
    .addAnswer(
      "Â¡Hola! ðŸ‘‹ Soy Nico, tu asesor virtual de la Municipalidad de Pampa del Infierno. Â¿En quÃ© puedo ayudarte hoy?"
    )
    .addAnswer(
      "Â¿Te gustarÃ­a saber en quÃ© trÃ¡mites puedo ayudarte?, escribÃ­ la palabra *Menu* para ver las opciones disponibles.",
      { delay: 500 }
    )


const fastConsults = ["consultas", "consulta", "Consultas", "Consulta", "consultar", "Consultar", "una pregunta", "pregunta", "preguntas", "Preguntas", "preguntar", "Preguntar", "preguntame", "Preguntame", "preguntarte", "Preguntarte", "como hago", "Como hago", "como puedo", "Como puedo", "como se", "Como se", "como funciona", "Como funciona", "como funciona esto", "Como funciona esto"]
const flowFastConsults = addKeyword(fastConsults, { sensitive: true })
.addAnswer(
  "ðŸ‘‹ Soy Nico, Â¿Estoy aquÃ­ para resolver tu consulta?, puedes empezar con estas opciones..."
)
  .addAnswer(
    menu,
    { capture: true },
    async (ctx, { gotoFlow, fallBack }) => {
      if (fastConsults.includes(ctx.body)) {
        return fallBack(
          "Respuesta no vÃ¡lida, Por favor escriba *Menu* una de las opciones"
        );
      }else{
          return gotoFlow(flowConsultas);
      }
    }
  );
      

const arrayWordActiveMenu = ["Menu", "menÃº", "menu", "MenÃº"];

const menuFlow = addKeyword(arrayWordActiveMenu)
  .addAnswer(
    menu,
    { capture: true },
    async (ctx, { gotoFlow, fallBack, flowDynamic }) => {
      if (!["1", "2", "3", "0"].includes(ctx.body)) {
        return fallBack(
          "Respuesta no vÃ¡lida, Por favor selecciona una de las opciones"
        );
      }
      switch (ctx.body) {
        case "1":
          return gotoFlow(flowMenu);
        case "2":
          return gotoFlow(flowTurnos);
        case "3":
          return gotoFlow(flowConsultas);
        case "0":
          return await flowDynamic(
            "Saliendo... Puedes volver a acceder al menÃº escribiendo *Menu*"
          );
      }
    }
  )
  .addAnswer("Â¿En quÃ© mÃ¡s puedo ayudarte?", {
    delay: 1000,
  })
  .addAnswer(
    "Escribe *Menu* para volver al menÃº principal, y elegi opciÃ³n 3 para hacer mÃ¡s consultasss",
    { delay: 1000 }
  );

const main = async () => {
  const adapterDB = new MongoAdapter({
    dbUri: process.env.MONGO_DB_URI,
    dbName: "bot-whatsapp",
  });
  const adapterFlow = createFlow([
    // flowPrincipal,
    flowVoice,
    flowWelcome,
    menuFlow,
    flowMenu,
    flowTurnos,
    flowConsultas,
    flowFastConsults,
    // flowDefault,
    // menuConsultas,
  ]);
  const adapterProvider = createProvider(BaileysProvider);

  createBot({
    flow: adapterFlow,
    provider: adapterProvider,
    database: adapterDB,
  });

  QRPortalWeb();
};

main();

//-----regions CÃ³digo base de prueba

// const flowSecundario = addKeyword(['2', 'siguiente']).addAnswer(['ðŸ“„ AquÃ­ tenemos el flujo secundario'])

// const flowDocs = addKeyword(['doc', 'documentacion', 'documentaciÃ³n']).addAnswer(
//     [
//         'ðŸ“„ AquÃ­ encontras las documentaciÃ³n recuerda que puedes mejorarla',
//         'https://bot-whatsapp.netlify.app/',
//         '\n*2* Para siguiente paso.',
//     ],
//     null,
//     null,
//     [flowSecundario]
// )

// const flowTuto = addKeyword(['tutorial', 'tuto']).addAnswer(
//     [
//         'ðŸ™Œ AquÃ­ encontras un ejemplo rapido',
//         'https://bot-whatsapp.netlify.app/docs/example/',
//         '\n*2* Para siguiente paso.',
//     ],
//     null,
//     null,
//     [flowSecundario]
// )

// const flowGracias = addKeyword(['gracias', 'grac']).addAnswer(
//     [
//         'ðŸš€ Puedes aportar tu granito de arena a este proyecto',
//         '[*opencollective*] https://opencollective.com/bot-whatsapp',
//         '[*buymeacoffee*] https://www.buymeacoffee.com/leifermendez',
//         '[*patreon*] https://www.patreon.com/leifermendez',
//         '\n*2* Para siguiente paso.',
//     ],
//     null,
//     null,
//     [flowSecundario]
// )

// const flowDiscord = addKeyword(['discord']).addAnswer(
//     ['ðŸ¤ª Ãšnete al discord', 'https://link.codigoencasa.com/DISCORD', '\n*2* Para siguiente paso.'],
//     null,
//     null,
//     [flowSecundario]
// )

//------endsregions CÃ³digo base de prueba
